@using DealDynamo.Areas.Identity.Data
@using DealDynamo.Services
@using Microsoft.AspNetCore.Identity
@model DealDynamo.Models.ProductViewModels.ProductListViewModel

@inject UserManager<ApplicationUser> UserManager
@inject ICategoryRepository _categoryRepository

@{
    ViewData["Title"] = "Products";
    bool IsSeller = User.IsInRole("Seller");
}

<h1>Products</h1>

@if (IsSeller)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}

<table class="table table-bordered">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Title)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Quantity)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Description)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().ProductImage)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().CategoryID)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().SellerID)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Price)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Products)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.ProductImage)</td>
                <td>@_categoryRepository.GetCategoryById(item.CategoryID)?.Title</td>
                <td>@UserManager.FindByIdAsync(Convert.ToString(item.SellerID)).GetAwaiter().GetResult().UserName</td>
                <td>@Html.DisplayFor(modelItem => item.Price)</td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    @if (IsSeller)
                    {
                        @Html.ActionLink("Edit", "Edit", "Products", new { id = item.Id })
 <text>|</text>
                    }
                    @Html.ActionLink("Delete", "Delete", "Products", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = 1, pageSize = Model.PageSize })">First</a>
        </li>
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.CurrentPage - 1, pageSize = Model.PageSize })">Previous</a>
        </li>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { currentPage = i, pageSize = Model.PageSize })">@i</a>
            </li>
        }

        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.CurrentPage + 1, pageSize = Model.PageSize })">Next</a>
        </li>
        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.TotalPages, pageSize = Model.PageSize })">Last</a>
        </li>
    </ul>
</nav>
