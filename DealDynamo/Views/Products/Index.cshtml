@using DealDynamo.Areas.Identity.Data
@using DealDynamo.Services
@using Microsoft.AspNetCore.Identity
@model DealDynamo.Models.ProductViewModels.ProductListViewModel

@inject UserManager<ApplicationUser> UserManager
@inject ICategoryRepository _categoryRepository

@{
    ViewData["Title"] = "Products";
    bool IsSeller = User.IsInRole("Seller");
}

<h1>Products</h1>

@if (IsSeller)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}

<div class="d-flex align-items-center justify-content-evenly">
    <div class="form-group">
        <label for="categoryFilter">Filter by Category:</label>
        <select id="categoryFilter" class="form-control">
            <option value="">All</option>
            @foreach (var category in _categoryRepository.GetAllCategories())
            {
                <option value="@category.Id" selected=@(ViewBag.CategoryFilter != null && ViewBag.CategoryFilter.ToString() == category.Id.ToString())>@category.Title</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="sortOrder">Sort by:</label>
        <select id="sortOrder" class="form-control">
            <option value="title_asc" selected=@(ViewBag.SortOrder == "title_asc" )>Title (A-Z)</option>
            <option value="title_desc" selected=@(ViewBag.SortOrder == "title_desc" )>Title (Z-A)</option>
            <option value="price_asc" selected=@(ViewBag.SortOrder == "price_asc" )>Price (Low to High)</option>
            <option value="price_desc" selected=@(ViewBag.SortOrder == "price_desc" )>Price (High to Low)</option>
            <option value="quantity_asc" selected=@(ViewBag.SortOrder == "quantity_asc" )>Quantity (Low to High)</option>
            <option value="quantity_desc" selected=@(ViewBag.SortOrder == "quantity_desc" )>Quantity (High to Low)</option>
        </select>
    </div>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Title)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Quantity)</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().ProductImage)</th>
            <th>Category</th>
            <th>Seller</th>
            <th>@Html.DisplayNameFor(model => model.Products.FirstOrDefault().Price)</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Products)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Title)</td>
                <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                <td><img src="~/images/@item.ProductImage" width="200" height="200" /></td>
                <td>@_categoryRepository.GetCategoryById(item.CategoryID)?.Title</td>
                <td>@UserManager.FindByIdAsync(Convert.ToString(item.SellerID)).GetAwaiter().GetResult().UserName</td>
                <td>@Html.DisplayFor(modelItem => item.Price)</td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info">Details</a> |
                    @if (IsSeller)
                    {
                        @Html.ActionLink("Edit", "Edit", "Products", new { id = item.Id }, new{@class="btn btn-primary"}) <text>|</text>
                    }
                    @Html.ActionLink("Delete", "Delete", "Products", new { id = item.Id }, new{@class="btn btn-danger"})
                </td>
            </tr>
        }
    </tbody>
</table>

<nav aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = 1, pageSize = Model.PageSize, categoryFilter = ViewBag.CategoryFilter, sortOrder = ViewBag.SortOrder })">First</a>
        </li>
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.CurrentPage - 1, pageSize = Model.PageSize, categoryFilter = ViewBag.CategoryFilter, sortOrder = ViewBag.SortOrder })">Previous</a>
        </li>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="@Url.Action("Index", new { currentPage = i, pageSize = Model.PageSize, categoryFilter = ViewBag.CategoryFilter, sortOrder = ViewBag.SortOrder })">@i</a>
            </li>
        }

        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.CurrentPage + 1, pageSize = Model.PageSize, categoryFilter = ViewBag.CategoryFilter, sortOrder = ViewBag.SortOrder })">Next</a>
        </li>
        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Index", new { currentPage = Model.TotalPages, pageSize = Model.PageSize, categoryFilter = ViewBag.CategoryFilter, sortOrder = ViewBag.SortOrder })">Last</a>
        </li>
    </ul>
</nav>

@section Scripts {
<script>
    $(document).ready(function () {
        $('#categoryFilter, #sortOrder').change(function () {
            var categoryFilter = $('#categoryFilter').val();
            var sortOrder = $('#sortOrder').val();

            var queryString = $.param({
                categoryFilter: categoryFilter,
                sortOrder: sortOrder,
                currentPage: 1, // Reset to the first page on filter change
                pageSize: @Model.PageSize
            });

            window.location.href = '@Url.Action("Index")' + '?' + queryString;
        });
    });
</script>
}
